<?
# Get Vars
require './func/config.php';

$time = time();
$httpmethod = 'GET';
$baseUrl = 'https://api.twitter.com/1.1/search/tweets.json';

# OAuth Request Parameters

/*
oauth_consumer_key = $twitterAPI;

oauth_nonce = Unique token generated by the application for each unique request. 
Any approach which produces a relatively random alphanumeric string should work.
Possible generate base64 encoding of random data, and stripping out all non-wrod characters (+ =).

oauth_signature = Generated by running all other request parameters and two secret values through a signing algorithm.

oauth_signature_method = HMAC-SHA1

oauth_timestamp = $time;

oauth_token = $twitterToken;

oauth_version = 1.0;
*/

$rand = md5(microtime());
$rand2 = str_split($rand);
shuffle($rand2);
$rand2 = implode($rand2);
$rand = $rand2;


##### Create OAUTH Signature

$oauthSig_params=array(
	"oauth_consumer_key" => $twitterAPI,
	"oauth_nonce" => $rand,
	"oauth_signature_method" => 'HMAC-SHA1',
	"oauth_timestamp" => $time,
	"oauth_token" => $twitterToken,
	"oauth_version" => '1.0',
	"q" => $twitterQuery
);

# %-encode every key and value that will be signed
foreach($oauthSig_params as $key=>$val){
	$ekey = rawurlencode($key);
	$oauthSig_paramsEnc[$ekey] = rawurlencode($val);
}

# Sort the list of parameters alphabetically by encoded key
ksort($oauthSig_paramsEnc);
# For each key/value pair:
$oauthSigString = '';
foreach($oauthSig_paramsEnc as $key=>$val){
	# append the encoded key to the output string
	$oauthSigString .= $key;
	# append = to the output string
	$oauthSigString .= '=';
	# append the encoded value to the output string
	$oauthSigString .= $val;
	# append & if there are more pairs
	$oauthSigString .= '&';
}
$oauthSigString = substr($oauthSigString, 0, -1);
/*
echo '<pre>';
echo 'Pre-encoded Signature String: '.$oauthSigString;
echo '</pre>';
*/

$oauthSigOut = '';
# Convert the HTTP method to uppercase
$oauthSigOut .= strtoupper($httpmethod);
# Append the & character
$oauthSigOut .= '&';
# % Encode the URL and append it
$oauthSigOut .= rawurlencode($baseUrl);
# Append the & character
$oauthSigOut .= '&';
# % Encode the Sig String and append
$oauthSigOut .= rawurlencode($oauthSigString);

# Get Signing Key
$oauthSigKey = rawurlencode($twitterConSec).'&'.rawurlencode($twitterOAuthSec);

# Calculate HMAC
$oauthSig = hash_hmac('sha1', $oauthSigOut, $oauthSigKey, true);
$oauthSig = base64_encode($oauthSig);

##### Create OAUTH String



$oauth_params=array(
	"oauth_consumer_key" => $twitterAPI,
	"oauth_nonce" => $rand,
	"oauth_signature" => $oauthSig,
	"oauth_signature_method" => 'HMAC-SHA1',
	"oauth_timestamp" => $time,
	"oauth_token" => $twitterToken,
	"oauth_version" => '1.0'
);

$oauthString = '';

foreach ($oauth_params as $key=>$val){
	$oauthString .= rawurlencode($key);
	$oauthString .= '=';
	$oauthString .= '"';
	$oauthString .= rawurlencode($val);
	$oauthString .= '"';
	$oauthString .= ', ';
	 }

$oauthString = substr($oauthString, 0, -2);
$oauthString = 'OAuth '.$oauthString;

 
#Get the content... Finally... Jesus, Twitter...

#Check if content has been grabbed in last 1 minute

$db = new SQLite3('./twitter/twitter.db');
#$queryurl = $db->escapeString($_POST['url']);

$result = $db->query('SELECT * FROM tweets ORDER BY id DESC LIMIT 1');

$arrayDump=$result->fetchArray();
#Get the last time run from the database	
if (isset($arrayDump['id']))
{
	$lastTime = $arrayDump['time'];
	$lastSearch = $arrayDump['content'];
}
else{
	$lastTime = 0;
}
#If > 1 min of last run, get new content
if($time - $lastTime >= 60){
	
	$url = "https://api.twitter.com/1.1/search/tweets.json?q=".rawurlencode($twitterQuery);
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	#curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_HTTPHEADER, array(
		"Authorization: ".$oauthString
	));
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLINFO_HEADER_OUT, 1);
	$searchResult = curl_exec($ch);
	curl_close($ch);
	
	#Write Content to DB
	$resClean = $db->escapeString($searchResult);
	#echo '<pre>';
	#echo "NEW DATA:";
	#echo '</pre>';
	$db->exec("INSERT INTO tweets (content, time) VALUES ('".$resClean."','".$time."')");
	
	#Limit DB to 25 Entries
	$db->exec('DELETE FROM tweets WHERE id NOT IN (SELECT id FROM tweets ORDER BY id DESC LIMIT 25)');
}
	
#Else just pull content from DB
else{
	$searchResult = $lastSearch;
	#echo "OLD DATA! LESS THAN 1 MINUTE HAS PASSED! (".strval($time-$lastTime)." seconds)";
}

/*
echo '<pre>';
echo 'OAuth Signature String: '.$oauthSigOut.'<br/>';
echo 'OAuth Signature Key: '.$oauthSigKey.'<br/>';
echo 'OAuth Authorization String for header: '.$oauthString.'<br/>';
echo 'OAuth Signature after encoding: '.$oauthSig.'<br/>';
echo '<br/><br/>';
echo '</pre>';
*/
#echo '<pre>';
#var_dump($searchResult);
#echo '<br/><br/>';
$searchResult = json_decode($searchResult, true);
#var_dump($searchResult);
#echo '</pre>';

/*
echo '<br/><br/>';
$info = curl_getinfo($ch);
var_dump($info);
echo '<br/><br/>';
$info = curl_getinfo($ch, CURLINFO_HEADER_OUT);
var_dump($info);
curl_close($ch);
echo '</pre>';
*/

$tweets = array();
# Print the results
foreach($searchResult['statuses'] as $key=>$val){
	$tweets[$key]['created_at'] = $val['created_at'];
	$tweets[$key]['text'] = $val['text'];
	$tweets[$key]['id_str'] = $val['id_str'];
	$tweets[$key]['user'] = $val['user'];
	if(isset($val['entities']['urls'])){
		$tweets[$key]['urls']=$val['entities']['urls'];
	}
	if(isset($val['entities']['hashtags'])){
		$tweets[$key]['hashtags']=$val['entities']['hashtags'];
	}
	
	#echo '<b><a href="https://twitter.com/'.$val["user"]["screen_name"].'" target="_blank">@'.$val["user"]["screen_name"].'</a>:</b> '.$val["text"];
	#echo ' - <a href="https://twitter.com/'.$val["user"]["screen_name"].'/statuses/'.$val["id_str"].'" target="_blank">View Tweet</a>';
	#echo '<br/>';
}

#echo '<div id="debug" style="visibility:hidden;"><pre>';
#var_dump($searchResult);
#echo'</pre></div>';


?>


	<!--<head>-->
		<!--<title>Twitter Results for <? echo '$twitterQuery'; ?></title>-->
		<style>
			.tweet{
				display:inline-block;
				width:100%;
				position:relative;
			}
			#twitBox{
				width:700px;
				margin-left:auto;
				margin-right:auto;
				padding:10px;
				background-color:aliceblue;
			}
			.twitMeta{
				display:none;
				/*display:inline-block;*/
				margin-left:5px;
			}
			.twitTxt{
				float:left;
				display:inline-block;
				margin-left:5px;
				position:absolute;
				/*top:35%;*/
			}
			.twitUser{
				float:left;
				margin-right:5px;
			}
		</style>
		<script src="./scripts/jquery-1.11.0.min.js"></script>
	<!--</head>-->
	
		<div id="twitContain">
			<div id="twitBox">
					<?
						foreach($tweets as $key=>$val){
							echo '<div class="tweet" id="tweet-'.$key.'">';
							
								echo '<div class="twitUser">';
									echo '<a href="https://twitter.com/'.$val["user"]["screen_name"].'/statuses/'.$val["id_str"].'" target="_blank" title="@'.$val["user"]["screen_name"].'"><img src="'.$val["user"]["profile_image_url_https"].'" alt="@'.$val["user"]["screen_name"].'"/></a>';
								echo '</div>';
								
								echo '<div class="twitTxt">';
									#Convert URLs
									if(isset($val['urls'])){
										$convUrls = array();
										$urls = array();
										foreach($val['urls'] as $keyUrl=>$valUrl){
											$urls[]=$valUrl['url'];
											$convUrls[]='<a href="'.$valUrl['url'].'" target="_blank">'.$valUrl['url'].'</a>';
										}
										#echo 'urls: ';
										#print_r($urls);
										#echo 'convUrls: ';
										#print_r($convUrls);
										
										$twitTxt = str_replace($urls, $convUrls, $val['text']);
									}									
									
									#Convert Tags
									if(isset($val['hashtags'])){
										$convHash = array();
										$hash = array();
										foreach($val['hashtags'] as $keyHash=>$valHash){
											$hash[]='#'.$valHash['text'];
											$convHash[]='<a href="https://twitter.com/search?q=%23'.$valHash['text'].'" target="_blank">#'.$valHash['text'].'</a>';
										}
										$twitTxt = str_replace($hash, $convHash, $twitTxt);
									}
									#Print converted string
									echo $twitTxt;
								echo '</div>';
								
								echo '<div class="twitMeta">';
									echo $val['created_at'];
								echo '</div>';
							
							echo '</div>';
						}
					?>
				</div>
			</div>
		<!--</div>-->

	<script>
		
		var divs = $('div[id^="tweet-"]').hide(),
			i = 0;
		(function cycle() {
			divs.eq(i).fadeIn(400)
					  .delay(5000)
					  .fadeOut(400, cycle);
					  
			i = ++i % divs.length;
		})();
	</script>

